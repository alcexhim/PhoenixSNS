<?php
	namespace PhoenixSNS\Modules;
	
	use WebFX\Controls\ButtonGroup;
	use WebFX\Controls\ButtonGroupButton;
	use WebFX\Controls\ButtonGroupButtonAlignment;
	
	use WebFX\Controls\Panel;
	
	use PhoenixSNS\Objects\User;
	use PhoenixSNS\Objects\UserProfileVisibility;
	use PhoenixSNS\Objects\UserPresenceStatus;
	
	use WebFX\System;
	use WebFX\Module;
	use WebFX\ModulePage;
	
	use DataFX\DataFX;
	use DataFX\Table;
	use DataFX\Column;
	use DataFX\ColumnValue;
	use DataFX\Record;
	use DataFX\RecordColumn;
	
	use WebFX\WebPage;
	use PhoenixSNS\Pages\ErrorPage;
	
	System::$Modules[] = new Module("net.phoenixsns.Setup", array
	(
		new ModulePage("setup", function($path)
		{
			if ($_SERVER["REQUEST_METHOD"] == "POST")
			{
	function Success($taskname)
	{
?>
					<tr>
						<td style="background-color: #AAFFAA;"><?php echo($taskname); ?></td>
					</tr>
<?php
	}
	function Message($taskname)
	{
?>
					<tr>
						<td style="background-color: #AACCFF;"><?php echo($taskname); ?></td>
					</tr>
<?php
	}
	function Failure($taskname)
	{
?>
					<tr>
						<td style="background-color: #FFAAAA;"><?php echo($taskname); ?></td>
					</tr>
<?php
	}
	
	function VariableToString($value)
	{
		if (is_string($value))
		{
			return "\"" . $value . "\"";
		}
		return $value;
	}
	
	function SaveConfiguration()
	{
		global $RootPath;
		$FileName = $RootPath . "/Include/Configuration.inc.php";
		$f = fopen($FileName, "w");
		Message("Configuration file path is<br />" . $FileName);
		if ($f === false) return false;
		
		fwrite($f, "<?php\n");
		fwrite($f, "\tuse WebFX\\System;\n");
		fwrite($f, "\n");
		fwrite($f, "\t// Whether we should enable users to run the setup application\n");
		fwrite($f, "\tSystem::\$Configuration[\"Setup.Enabled\"] = false;\n");
		fwrite($f, "\n");
		fwrite($f, "\t// The base path of the Web site\n");
		fwrite($f, "\tSystem::\$Configuration[\"Application.BasePath\"] = \"" . System::$Configuration["Application.BasePath"] . "\";\n");
		fwrite($f, "\n");
		fwrite($f, "\t// The default tenant for the Web site\n");
		fwrite($f, "\tSystem::\$Configuration[\"Application.DefaultTenant\"] = \"default\";\n");
		fwrite($f, "\n");
		fwrite($f, "\t// The location of static WebFramework-related files (scripts, stylesheets, etc.)\n");
		fwrite($f, "\tSystem::\$Configuration[\"WebFramework.StaticPath\"] = \"" . System::$Configuration["WebFramework.StaticPath"] . "\";\n");
		fwrite($f, "\n");
		fwrite($f, "\t// Login and registration information - you can change these paths for external authentication\n");
		fwrite($f, "\tSystem::\$Configuration[\"Account.LoginPath\"] = \"~/account/login.page\";\n");
		fwrite($f, "\tSystem::\$Configuration[\"Account.RegisterPath\"] = \"~/account/register.page\";\n");
		fwrite($f, "\tSystem::\$Configuration[\"Account.ResetPasswordPath\"] = \"~/account/password/reset.page\";\n");
		fwrite($f, "\n");
		fwrite($f, "\n");
		fwrite($f, "\t// *** GENERATED BY PHOENIXSNS SETUP APPLICATION - DO NOT EDIT BELOW THIS LINE ***\n");
		
		$preinstalledKeys = array("Setup.Enabled", "Application.BasePath", "WebFramework.StaticPath", "Account.LoginPath", "Account.RegisterPath", "Account.ResetPasswordPath");
		foreach (System::$Configuration as $key => $value)
		{
			$skip = false;
			foreach ($preinstalledKeys as $pikey)
			{
				if ($key == $pikey)
				{
					$skip = true;
					break;
				}
			}
			if ($skip) continue;
			fwrite($f, "\tSystem::\$Configuration[\"" . $key . "\"] = " . VariableToString($value) . ";\n");
		}
		fwrite($f, "?>\n");
		fclose($f);
		return true;
	}
				?>
				<div style="text-align: center;">
					<img src="<?php echo(System::ExpandRelativePath("~/images/PhoenixSNSLogo.png")); ?>" style="height: 200px;" />
				</div>
				<p style="text-align: center;">
					PhoenixSNS is configuring your initial instance. This would be a good time for a coffee break...
				</p>
				<table style="width: 600px; margin-left: auto; margin-right: auto;" border="1">
<?php
					Message("Writing configuration file");
					
					// set the database configuration
					System::$Configuration["Database.ServerName"] = $_POST["database_servername"];
					System::$Configuration["Database.DatabaseName"] = $_POST["database_databasename"];
					System::$Configuration["Database.UserName"] = $_POST["database_username"];
					System::$Configuration["Database.Password"] = $_POST["database_password"];
					System::$Configuration["Database.TablePrefix"] = $_POST["database_tableprefix"];
					
					$retval = SaveConfiguration();
					
					if ($retval)
					{
						Success("Configuration file wrote successfully");
					}
					else
					{
						Failure("Could not write the configuration file!");
						return true;
					}
					
					$retval = DataFX::Initialize();
					
					if ($retval)
					{
						Success("Initialized DataFX library");
					}
					else
					{
						Failure("Could not initialize DataFX library with the new configuration!");
						Message("Database returned error " . DataFX::$Errors[0]->Code . ": " . DataFX::$Errors[0]->Message);
						return true;
					}
					
					// create the Users table
					/*
					$tables = array
					(
						new Table("MarketResourceBankDetails", "bankdetail_", array
						(
							// 			$name, $dataType, $size, $value, $allowNull, $primaryKey, $autoIncrement
							new Column("ResourceTypeID", "INT", null, null, false),
							new Column("Name", "VARCHAR", 50, null, false),
							new Column("TitleSingular", "VARCHAR", 100, null, false),
							new Column("TitlePlural", "VARCHAR", 100, null, false)
						)),
						new Table("Tasks", "task_", array
						(
							// 			$name, $dataType, $size, $value, $allowNull, $primaryKey, $autoIncrement
							new Column("ID", "INT", null, null, false, true, true),
							new Column("TenantID", "INT", null, null, false),
							new Column("Title", "VARCHAR", 100, null, false),
							new Column("URL", "LONGTEXT", null, null, false)
						)),
						new Table("Themes", "theme_", array
						(
							// 			$name, $dataType, $size, $value, $allowNull, $primaryKey, $autoIncrement
							new Column("ID", "INT", null, null, false, true, true),
							new Column("TenantID", "INT", null, null, false),
							new Column("Name", "VARCHAR", 100, null, false),
							new Column("Title", "VARCHAR", 100, null, false),
							new Column("CreationUserID", "INT", null, null, false),
							new Column("CreationTimestamp", "DATETIME", null, null, false)
						)),
						new Table("UserEquippedItems", "equippeditem_", array
						(
							new Column("UserID", "INT", null, null, false),
							new Column("ItemID", "INT", null, null, false)
						)),
						new Table("UserInventoryFolders", "inventoryitem_", array
						(
							new Column("ID", "INT", null, null, false),
							new Column("Title", "VARCHAR", 100, null, false),
							new Column("ParentFolderID", "INT", null, null, true)
						)),
						new Table("UserInventoryItems", "inventoryitem_", array
						(
							new Column("UserID", "INT", null, null, false),
							new Column("ItemID", "INT", null, null, false),
							new Column("ParentFolderID", "INT", null, null, true)
						)),
						new Table("UserProfileContents", "content_", array
						(
							// posts by the user on their profile. can be scrolled back and forth like a journal. supports HTML!
							new Column("ID", "INT", null, null, false, true, true),
							new Column("TenantID", "INT", null, null, false),
							new Column("CreationUserID", "INT", null, null, false),
							new Column("CreationTimestamp", "DATETIME", null, null, false),
							new Column("Content", "LONGTEXT", null, null, false)
						)),
						new Table("UserProfileContentFeedbacks", "feedback_", array
						(
							// likes and dislikes for user profile contents
							new Column("ContentID", "INT", null, null, false),
							new Column("FeedbackTypeID", "INT", null, null, false),
							new Column("Comments", "VARCHAR", 200, null, false),
							new Column("CreationUserID", "INT", null, null, false),
							new Column("CreationTimestamp", "DATETIME", null, null, false)
						))
					);
					*/
					
					$tablefilepath = dirname(__FILE__) . "/Tables/*.inc.php";
					$tablefiles = glob($tablefilepath);
					foreach ($tablefiles as $tablefile)
					{
						require($tablefile);
					}
					
					foreach ($tables as $table)
					{
						if ($table->Exists())
						{
							Message("Table '" . $table->Name . "' already exists, skipping creation");
						}
						else
						{
							$retval = $table->Create();
							if ($retval)
							{
								Success("Created table '" . $table->Name . "'");
							}
							else
							{
								Failure("Could not create table '" . $table->Name . "'");
								Message("Database returned error " . DataFX::$Errors->Items[0]->Code . ": " . DataFX::$Errors->Items[0]->Message);
							}
						}
					}
					
					global $MySQL;
					$MySQL->query("ALTER TABLE " . System::GetConfigurationValue("Database.TablePrefix") . "Users ADD UNIQUE KEY (user_LoginID, user_TenantID)");
					$MySQL->query("ALTER TABLE " . System::GetConfigurationValue("Database.TablePrefix") . "Users ADD UNIQUE KEY (user_URLName, user_TenantID)");
					$MySQL->query("ALTER TABLE " . System::GetConfigurationValue("Database.TablePrefix") . "Users ADD UNIQUE KEY (user_DisplayName, user_TenantID)");
					
					$MySQL->query("ALTER TABLE " . System::GetConfigurationValue("Database.TablePrefix") . "Groups ADD UNIQUE KEY (group_Name, group_TenantID)");
					$MySQL->query("ALTER TABLE " . System::GetConfigurationValue("Database.TablePrefix") . "Groups ADD UNIQUE KEY (group_Title, group_TenantID)");
					
					$MySQL->query("ALTER TABLE " . System::GetConfigurationValue("Database.TablePrefix") . "Places ADD UNIQUE KEY (place_Name, place_TenantID)");
					$MySQL->query("ALTER TABLE " . System::GetConfigurationValue("Database.TablePrefix") . "Places ADD UNIQUE KEY (place_Title, place_TenantID)");
?>
				</table>
				<?php
				return true;
			}
			
			$page = new WebPage();
			$page->BeginContent();
?>
<div style="text-align: center;">
	<img src="<?php echo(System::ExpandRelativePath("~/images/PhoenixSNSLogo.png")); ?>" style="height: 200px;" />
</div>
<p style="text-align: center;">
	Please provide some information about your server to create the initial PhoenixSNS instance. Other instances may
	be created and removed at any time by entering the Administrator Control Panel.
</p>
<form method="POST">
	<table style="width: 400px; margin-left: auto; margin-right: auto;">
		<tr>
			<td style="width: 128px;"><label for="txtServerName">Server name:</label></td>
			<td><input type="text" id="txtServerName" name="database_servername" style="width: 100%;" value="<?php
			if (isset(System::$Configuration["Database.ServerName"]))
			{
				echo(System::$Configuration["Database.ServerName"]);
			}
			else
			{
				echo("localhost");
			}
			?>" />
		</tr>
		<tr>
			<td><label for="txtDatabaseName">Database name:</label></td>
			<td><input type="text" id="txtDatabaseName" name="database_databasename" style="width: 100%;" value="<?php
			if (isset(System::$Configuration["Database.DatabaseName"]))
			{
				echo(System::$Configuration["Database.DatabaseName"]);
			}
			else
			{
				echo("phoenixsns");
			}
			?>" /></td>
		</tr>
		<tr>
			<td><label for="txtUserName">User name:</label></td>
			<td><input type="text" id="txtUserName" name="database_username" style="width: 100%;" value="<?php
			if (isset(System::$Configuration["Database.UserName"]))
			{
				echo(System::$Configuration["Database.UserName"]);
			}
			else
			{
				echo("phoenixsns");
			}
			?>" /></td>
		</tr>
		<tr>
			<td><label for="txtPassword">Password:</label></td>
			<td><input type="password" id="txtPassword" name="database_password" value="" style="width: 100%;" /></td>
		</tr>
		<tr>
			<td><label for="txtTablePrefix">Table prefix:</label></td>
			<td><input type="text" id="txtTablePrefix" name="database_tableprefix" value="<?php
			if (isset(System::$Configuration["Database.TablePrefix"]))
			{
				echo(System::$Configuration["Database.TablePrefix"]);
			}
			else
			{
				echo("phoenix_");
			}
			?>" style="width: 100%;" /></td>
		</tr>
		<tr>
			<td colspan="2" style="text-align: center;"><input type="submit" value="Continue" /></td>
		</tr>
	</table>
</form>
<?php
			$page->EndContent();
			return true;
		},
		function($path)
		{
			$enabled = false;
			if (isset(System::$Configuration["Setup.Enabled"]))
			{
				$enabled = (System::$Configuration["Setup.Enabled"] == "true");
			}
			if (!$enabled)
			{
				$page = new \WebFX\WebPage();
				$page->Title = "Configuration Error";
				$page->BeginContent();
				echo("<div style=\"text-align: center;\"><img style=\"height: 120px;\" src=\"" . System::ExpandRelativePath("~/images/PhoenixSNSLogo.png") . "\" /></div><div>This PhoenixSNS installation has not been configured. Please contact the server administrator.</div>");
				$page->EndContent();
				return false;
			}
		})
	));
?>
