<?php
	namespace PhoenixSNS\Modules;
	
	use WebFX\Controls\ButtonGroup;
	use WebFX\Controls\ButtonGroupButton;
	use WebFX\Controls\ButtonGroupButtonAlignment;
	
	use WebFX\Controls\Panel;
	
	use PhoenixSNS\Objects\Tenant;
	
	use PhoenixSNS\Objects\User;
	use PhoenixSNS\Objects\UserProfileVisibility;
	use PhoenixSNS\Objects\UserPresenceStatus;
	
	use WebFX\System;
	use WebFX\Module;
	use WebFX\ModulePage;
	
	use DataFX\DataFX;
	use DataFX\Table;
	use DataFX\Column;
	use DataFX\ColumnValue;
	use DataFX\Record;
	use DataFX\RecordColumn;
	
	use WebFX\WebPage;
	use PhoenixSNS\Pages\ErrorPage;
	
	use PhoenixSNS\TenantManager\Pages\SetupPage;
	
	System::$Modules[] = new Module("net.phoenixsns.Setup", array
	(
		new ModulePage("setup", function($page, $path)
		{
			if ($_SERVER["REQUEST_METHOD"] == "POST")
			{
	function Success($taskname)
	{
?>
					<tr>
						<td style="background-color: #AAFFAA;"><?php echo($taskname); ?></td>
					</tr>
<?php
	}
	function Message($taskname)
	{
?>
					<tr>
						<td style="background-color: #AACCFF;"><?php echo($taskname); ?></td>
					</tr>
<?php
	}
	function Failure($taskname)
	{
?>
					<tr>
						<td style="background-color: #FFAAAA;"><?php echo($taskname); ?></td>
					</tr>
<?php
	}
	
	function VariableToString($value)
	{
		if (is_string($value))
		{
			return "\"" . $value . "\"";
		}
		return $value;
	}
	
	function SaveConfiguration()
	{
		global $RootPath;
		$FileName = $RootPath . "/Include/Configuration.inc.php";
		$f = fopen($FileName, "w");
		Message("Configuration file path is<br />" . $FileName);
		if ($f === false) return false;
		
		fwrite($f, "<?php\n");
		fwrite($f, "\tuse WebFX\\System;\n");
		fwrite($f, "\n");
		fwrite($f, "\t// Whether we should enable users to run the setup application\n");
		fwrite($f, "\tSystem::\$Configuration[\"Setup.Enabled\"] = false;\n");
		fwrite($f, "\n");
		fwrite($f, "\t// The base path of the Web site\n");
		fwrite($f, "\tSystem::\$Configuration[\"Application.BasePath\"] = \"" . System::$Configuration["Application.BasePath"] . "\";\n");
		fwrite($f, "\n");
		fwrite($f, "\t// The default tenant for the Web site\n");
		fwrite($f, "\tSystem::\$Configuration[\"Application.DefaultTenant\"] = \"" . $_POST["Application_DefaultTenant"] . "\";\n");
		fwrite($f, "\n");
		fwrite($f, "\t// The location of static WebFramework-related files (scripts, stylesheets, etc.)\n");
		fwrite($f, "\tSystem::\$Configuration[\"WebFramework.StaticPath\"] = \"" . System::$Configuration["WebFramework.StaticPath"] . "\";\n");
		fwrite($f, "\n");
		fwrite($f, "\t// Login and registration information - you can change these paths for external authentication\n");
		fwrite($f, "\tSystem::\$Configuration[\"Account.LoginPath\"] = \"~/account/login.page\";\n");
		fwrite($f, "\tSystem::\$Configuration[\"Account.RegisterPath\"] = \"~/account/register.page\";\n");
		fwrite($f, "\tSystem::\$Configuration[\"Account.ResetPasswordPath\"] = \"~/account/password/reset.page\";\n");
		fwrite($f, "\n");
		fwrite($f, "\n");
		fwrite($f, "\t// *** GENERATED BY PHOENIXSNS SETUP APPLICATION - DO NOT EDIT BELOW THIS LINE ***\n");
		
		$preinstalledKeys = array("Setup.Enabled", "Application.BasePath", "WebFramework.StaticPath", "Account.LoginPath", "Account.RegisterPath", "Account.ResetPasswordPath", "Application.DefaultTenant", "AdministratorUserName", "AdministratorPassword");
		foreach (System::$Configuration as $key => $value)
		{
			$skip = false;
			foreach ($preinstalledKeys as $pikey)
			{
				if ($key == $pikey)
				{
					$skip = true;
					break;
				}
			}
			if ($skip) continue;
			fwrite($f, "\tSystem::\$Configuration[\"" . $key . "\"] = " . VariableToString($value) . ";\n");
		}
		fwrite($f, "?>\n");
		fclose($f);
		return true;
	}
				?>
				<div style="text-align: center;">
					<img src="<?php echo(System::ExpandRelativePath("~/Images/Billboard.png")); ?>" style="height: 200px;" />
				</div>
				<p style="text-align: center;">
					PhoenixSNS is configuring your initial instance. This would be a good time for a coffee break...
				</p>
				<table style="width: 600px; margin-left: auto; margin-right: auto;" border="1">
<?php
					Message("Writing configuration file");
					
					// set the database configuration
					System::$Configuration["Database.ServerName"] = $_POST["database_servername"];
					System::$Configuration["Database.DatabaseName"] = $_POST["database_databasename"];
					System::$Configuration["Database.UserName"] = $_POST["database_username"];
					System::$Configuration["Database.Password"] = $_POST["database_password"];
					System::$Configuration["Database.TablePrefix"] = $_POST["database_tableprefix"];
					
					$retval = SaveConfiguration();
					
					if ($retval)
					{
						Success("Configuration file wrote successfully");
					}
					else
					{
						Failure("Could not write the configuration file!");
						return true;
					}
					
					$retval = DataFX::Initialize();
					
					if ($retval)
					{
						Success("Initialized DataFX library");
					}
					else
					{
						Failure("Could not initialize DataFX library with the new configuration!");
						Message("Database returned error " . DataFX::$Errors->Items[0]->Code . ": " . DataFX::$Errors->Items[0]->Message);
						Message(DataFX::$Errors->Items[0]->Query);
						return true;
					}
					
					// create the Users table
					/*
					$tables = array
					(
						new Table("MarketResourceBankDetails", "bankdetail_", array
						(
							// 			$name, $dataType, $size, $value, $allowNull, $primaryKey, $autoIncrement
							new Column("ResourceTypeID", "INT", null, null, false),
							new Column("Name", "VARCHAR", 50, null, false),
							new Column("TitleSingular", "VARCHAR", 100, null, false),
							new Column("TitlePlural", "VARCHAR", 100, null, false)
						)),
						new Table("Tasks", "task_", array
						(
							// 			$name, $dataType, $size, $value, $allowNull, $primaryKey, $autoIncrement
							new Column("ID", "INT", null, null, false, true, true),
							new Column("TenantID", "INT", null, null, false),
							new Column("Title", "VARCHAR", 100, null, false),
							new Column("URL", "LONGTEXT", null, null, false)
						)),
						new Table("Themes", "theme_", array
						(
							// 			$name, $dataType, $size, $value, $allowNull, $primaryKey, $autoIncrement
							new Column("ID", "INT", null, null, false, true, true),
							new Column("TenantID", "INT", null, null, false),
							new Column("Name", "VARCHAR", 100, null, false),
							new Column("Title", "VARCHAR", 100, null, false),
							new Column("CreationUserID", "INT", null, null, false),
							new Column("CreationTimestamp", "DATETIME", null, null, false)
						)),
						new Table("UserEquippedItems", "equippeditem_", array
						(
							new Column("UserID", "INT", null, null, false),
							new Column("ItemID", "INT", null, null, false)
						)),
						new Table("UserInventoryFolders", "inventoryitem_", array
						(
							new Column("ID", "INT", null, null, false),
							new Column("Title", "VARCHAR", 100, null, false),
							new Column("ParentFolderID", "INT", null, null, true)
						)),
						new Table("UserInventoryItems", "inventoryitem_", array
						(
							new Column("UserID", "INT", null, null, false),
							new Column("ItemID", "INT", null, null, false),
							new Column("ParentFolderID", "INT", null, null, true)
						)),
						new Table("UserProfileContents", "content_", array
						(
							// posts by the user on their profile. can be scrolled back and forth like a journal. supports HTML!
							new Column("ID", "INT", null, null, false, true, true),
							new Column("TenantID", "INT", null, null, false),
							new Column("CreationUserID", "INT", null, null, false),
							new Column("CreationTimestamp", "DATETIME", null, null, false),
							new Column("Content", "LONGTEXT", null, null, false)
						)),
						new Table("UserProfileContentFeedbacks", "feedback_", array
						(
							// likes and dislikes for user profile contents
							new Column("ContentID", "INT", null, null, false),
							new Column("FeedbackTypeID", "INT", null, null, false),
							new Column("Comments", "VARCHAR", 200, null, false),
							new Column("CreationUserID", "INT", null, null, false),
							new Column("CreationTimestamp", "DATETIME", null, null, false)
						))
					);
					*/
					
					$tables = array();
					
					$tablefilepath = dirname(__FILE__) . "/Tables/*.inc.php";
					$tablefiles = glob($tablefilepath);
					foreach ($tablefiles as $tablefile)
					{
						require($tablefile);
					}
					
					$failed = false;
					
					foreach ($tables as $table)
					{
						if ($table->Exists())
						{
							Message("Table '" . $table->Name . "' already exists, skipping creation");
						}
						else
						{
							$retval = $table->Create();
							if ($retval)
							{
								Success("Created table '" . $table->Name . "'");
							}
							else
							{
								Failure("Could not create table '" . $table->Name . "'");
								Message("Database returned error " . DataFX::$Errors->Items[0]->Code . ": " . DataFX::$Errors->Items[0]->Message);
								Message(DataFX::$Errors->Items[0]->Query);
								$failed = true;
							}
						}
					}
					
					$user = User::Create($_POST["TenantManager_UserName"], $_POST["TenantManager_Password"]);
					if ($user == null)
					{
						global $MySQL;
						Failure("Could not create user '" . $_POST["TenantManager_UserName"] . "'");
						Message("Database returned error " . $MySQL->errno . ": " . $MySQL->error);
						$failed = true;
					}
					
					$tenant = Tenant::Create($_POST["Application_DefaultTenant"], "The default tenant for PhoenixSNS.");
					$tablefilepath = dirname(__FILE__) . "/TenantObjects/*.inc.php";
					$tablefiles = glob($tablefilepath);
					foreach ($tablefiles as $tablefile)
					{
						$tenant = Tenant::GetByID(1);
						require($tablefile);
					}
					
					require(dirname(__FILE__) . "/DefaultTenant.inc.php");
?>
				</table>
				<?php
				if (!$failed)
				{
					echo("<script type=\"text/javascript\">window.location.href='" . System::ExpandRelativePath("~/") . "';</script>");
					return true;
				}
				return true;
			}
			
			$page = new SetupPage();
			$page->BeginContent();
?>
<p>
	Please provide some information about your server to create the initial PhoenixSNS instance. Other instances may
	be created and removed at any time by entering the Administrator Control Panel.
</p>
<form method="POST" id="frm">
	<div class="FormView" id="fvStep1">
		<div class="Field">
			<label for="txtUserName"><u>S</u>erver Name</label>
			<input type="text" name="database_servername" id="txtServerName" value="<?php echo(System::GetConfigurationValue("Database.ServerName", "localhost")); ?>" />
		</div>
		<div class="Field">
			<label for="txtPassword"><u>D</u>atabase Name</label>
			<input type="text" name="database_databasename" id="txtDatabaseName" value="<?php echo(System::GetConfigurationValue("Database.DatabaseName", "phoenixsns")); ?>" />
		</div>
		<div class="Field">
			<label for="txtPassword"><u>U</u>ser Name</label>
			<input type="text" name="database_username" id="txtUserName" value="<?php echo(System::GetConfigurationValue("Database.UserName", "phoenixsns")); ?>" />
		</div>
		<div class="Field">
			<label for="txtPassword"><u>P</u>assword</label>
			<input type="password" name="database_password" id="txtPassword" value="" />
		</div>
		<div class="Field">
			<label for="txtPassword"><u>T</u>able Prefix</label>
			<input type="text" name="database_tableprefix" id="txtTablePrefix" value="<?php echo(System::GetConfigurationValue("Database.TablePrefix", "phoenix_")); ?>" />
		</div>
	</div>
	<div class="FormView" id="fvStep2" style="display: none;">
		<div class="Field">
			<label for="txtPassword">A<u>d</u>ministrator User Name</label>
			<input type="text" name="TenantManager_UserName" id="txtAdministratorUserName" value="<?php echo(System::GetConfigurationValue("AdministratorUserName", "phoenixroot")); ?>" />
		</div>
		<div class="Field">
			<label for="txtPassword">Ad<u>m</u>inistrator Password</label>
			<input type="password" name="TenantManager_Password" id="txtAdministratorPassword" value="" />
		</div>
		<div class="Field">
			<label for="txtPassword"><u>I</u>nitial Tenant</label>
			<input type="text" name="Application_DefaultTenant" id="txtDefaultTenant" value="<?php echo(System::GetConfigurationValue("Application.DefaultTenant", "default")); ?>" />
		</div>
	</div>
	<div class="ButtonContainer">
		<input type="button" value="Continue" id="cmdContinue" />
	</div>
	<script type="text/javascript">
		var frm = document.getElementById("frm");
		var cmdContinue = document.getElementById("cmdContinue");
		var fvStep1 = document.getElementById("fvStep1");
		var fvStep2 = document.getElementById("fvStep2");
		cmdContinue.addEventListener("click", function(e)
		{
			if (fvStep2.style.display == "block")
			{
				frm.submit();
			}
			else
			{
				fvStep1.style.display = "none";
				fvStep2.style.display = "block";
			}
		});
	</script>
</form>
<?php
			$page->EndContent();
			return true;
		},
		function($page, $path)
		{
			$enabled = false;
			if (isset(System::$Configuration["Setup.Enabled"]))
			{
				$enabled = (System::$Configuration["Setup.Enabled"] == "true");
			}
			if (!$enabled)
			{
				$page = new SetupPage();
				$page->Title = "Configuration Error";
				$page->BeginContent();
				echo("This PhoenixSNS installation has not been configured. Please contact the server administrator.");
				$page->EndContent();
				return false;
			}
		})
	));
?>
